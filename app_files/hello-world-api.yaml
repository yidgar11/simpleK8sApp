apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-simple-app-deployment
  labels:
    app: my-simple-app
spec:
  replicas: 4
  selector:
    matchLabels:
      app: my-simple-app
  template:
    metadata:
      labels:
        app: my-simple-app
    spec:
      containers:
      - name: my-simple-app
        image: yidgar11/podinfo:v1.0
        ports:
        - containerPort: 9898
---
apiVersion: v1
kind: Service
metadata:
  name: hello-world-service
spec:
  type: NodePort
  ports:
    - port: 5000
      targetPort: 9898
      nodePort: 30007
  selector:
    app: my-simple-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-simple-app-config
data:
  app.py: |
    from http.server import BaseHTTPRequestHandler, HTTPServer

    # Define a request handler
    class SimpleRequestHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            # Handle GET request for /hello
            if self.path == "/hello":
                self.send_response(200)  # HTTP status 200: OK
                self.send_header("Content-Type", "text/plain")
                self.end_headers()
                self.wfile.write(b"hello world")
            elif self.path == "/hello":
                self.send_response(200)  # HTTP status 200: OK
                self.send_header("Content-Type", "text/plain")
                self.end_headers()
                self.wfile.write(b"hello world")
            else:
                # Return 404 for other paths
                self.send_response(404)
                self.send_header("Content-Type", "text/plain")
                self.end_headers()
                self.wfile.write(b"Not Found")

    # Set up and start the server
    def run_server():
        server_address = ("", 9009)  # Listen on all interfaces, port 9009
        httpd = HTTPServer(server_address, SimpleRequestHandler)
        print("Server running on port 9009...")
        httpd.serve_forever()

    if __name__ == "__main__":
        run_server()

